name: Build

on: [workflow_dispatch, push]

env:
  BUILD_TYPE: Release
  BUILD_CONFIG: RelWithDebInfo
  NETWORK: mainnet


jobs:
###############################################################################
# Build Desktop
###############################################################################
  build_desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019, ubuntu-18.04, macos-11]
        include:
          - os: windows-2019
            PLATFORM_NAME: win
          - os: ubuntu-18.04
            PLATFORM_NAME: linux
          - os: macos-11
            PLATFORM_NAME: mac
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Submodule update
      shell: bash
      run: |
        git submodule update --init --jobs 4

    - name: Download assets
      uses: ./.github/actions/download-beam-assets
      with:
        github_token: ${{secrets.INSTALLER_TOKEN}}
        workflow: build.yml
        branch: ${{ env.NETWORK }}
        path: downloads
        repo: BeamMW/beam
        platform_name: ${{matrix.PLATFORM_NAME}}
        search_artifacts: true
###############################################################################
# Create Build Environment
###############################################################################

    - name: Create Build Environment [macos-11]
      if: matrix.os == 'macos-11'
      run: |
        echo $GITHUB_WORKSPACE
        echo "OPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1" >> $GITHUB_ENV
        brew install boost
        brew install krb5
        export TZ=GMT-3
        sudo systemsetup -gettimezone
        security create-keychain -p github macos-build.keychain
        security default-keychain -s macos-build.keychain
        security unlock-keychain -p github macos-build.keychain
        security set-keychain-settings -t 3600 -l ~/Library/Keychains/macos-build.keychain
        echo "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}" | base64 --decode > certificate.p12
        security import certificate.p12 -k macos-build.keychain -P ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }} -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k github macos-build.keychain 

    - name: Create Build Environment [ubuntu all]
      shell: bash
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install libssl-dev curl libxi-dev libcups2-dev -y
        sudo apt-get install npm fakeroot rpm -y
        sudo apt-get install libkrb5-dev -y
      
    - name: Create Build Environment [ubuntu-18.04]
      shell: bash
      if: matrix.os == 'ubuntu-18.04'
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install g++-7
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 --slave /usr/bin/g++ g++ /usr/bin/g++-7
        sudo update-alternatives --set gcc "/usr/bin/gcc-7"

    - name: Create Build Environment [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        git clone --depth=1 https://github.com/BeamMW/libs.git c:/beam-libs
        echo "OPENSSL_ROOT_DIR=c:\beam-libs\openssl" >> $GITHUB_ENV
        git clone https://github.com/BeamMW/boost_prebuild_${{matrix.os}}.git c:/boost_prebuild
        echo "BOOST_ROOT=c:\boost_prebuild" >> $GITHUB_ENV

    - name: Download boost [ubuntu && macos]
      if: matrix.os != 'windows-2019'
      shell: bash
      run: |
        git clone --depth=1 https://github.com/BeamMW/boost_prebuild_${{matrix.os}}.git ${{runner.workspace}}/boost_prebuild
        echo "BOOST_INCLUDEDIR=${{runner.workspace}}/boost_prebuild/include" >> $GITHUB_ENV
        echo "BOOST_LIBRARYDIR=${{runner.workspace}}/boost_prebuild/lib/" >> $GITHUB_ENV
    
    - name: Beam Shader SDK
      if: ${{false}} 
      shell: bash
      run: |
        WORKSPACE='${{runner.workspace}}'
        WORKSPACE=${WORKSPACE//\\//}
        echo cloning to $WORKSPACE
        git clone --depth=1 https://github.com/BeamMW/shader-sdk.git $WORKSPACE/shader-sdk
        cd $WORKSPACE/shader-sdk
        ./shade init
        echo "BEAM_SHADER_SDK=$WORKSPACE/shader-sdk" >> $GITHUB_ENV
        echo "WASI_SDK_PREFIX=$WORKSPACE/shader-sdk/wasi-sdk-12.0" >> $GITHUB_ENV
        
###############################################################################
# Configure CMake
###############################################################################
    - name: Configure CMake [macos-11]
      if: matrix.os == 'macos-11'
      run: |
        cmake $GITHUB_WORKSPACE -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF -DUSE_BUNDLED_ZLIB=ON -DUSE_SSH=OFF -DUSE_HTTPS=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSOURC3_USE_STATIC=ON -DBRANCH_NAME=${GITHUB_REF##*/} .
      env:
        LDFLAGS: -L/usr/local/opt/icu4c/lib

    - name: Configure CMake [ubuntu all]
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: |
        cmake $GITHUB_WORKSPACE -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF -DUSE_BUNDLED_ZLIB=ON -DUSE_SSH=OFF -DUSE_HTTPS=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSOURC3_USE_STATIC=ON -DBRANCH_NAME=${GITHUB_REF##*/} .

    - name: Configure CMake [windows]
      if: matrix.os == 'windows-2019'
      shell: bash
      run: |
        cmake -G "Visual Studio 16 2019" -A x64 -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF -DUSE_BUNDLED_ZLIB=ON -DUSE_SSH=OFF -DUSE_HTTPS=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_CONFIGURATION_TYPES:STRING=$BUILD_CONFIG -DSOURC3_USE_STATIC=ON -DSOURC3_USE_STATIC_RUNTIME=On -DSTATIC_CRT=ON -DBRANCH_NAME=${GITHUB_REF##*/} .

###############################################################################
# Save version
###############################################################################
    - name: Save version info
      shell: bash
      run: |
        echo "PACKAGE_VERSION=$(cat version.gen)" >> $GITHUB_ENV
        if [ "${{ env.NETWORK }}" == "mainnet" ]; then
          echo "BEAM_TARGET_SUFFIX=" >> $GITHUB_ENV
        else
          echo "BEAM_TARGET_SUFFIX=-${{ env.NETWORK }}" >> $GITHUB_ENV
        fi

    - name: Change version for Electron
      shell: bash
      run: |
        sed 's/"version": "1.0.0"/"version": "'${{ env.PACKAGE_VERSION }}'"/g' ui/package.json > ui/package_tmp.json
        mv ui/package_tmp.json ui/package.json
 
###############################################################################
# Prepare electron build
###############################################################################
    - name: Prepare for electron build [windows-2019]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        mkdir -p ./ui/beam-res/{api,cli,node} ./ui/front/dist/assets
        cp ./downloads/wallet-api${{env.BEAM_TARGET_SUFFIX}}* ./ui/beam-res/api/
        cp ./downloads/ipfs-bindings* ./ui/beam-res/api/
        cp ./downloads/beam-wallet${{env.BEAM_TARGET_SUFFIX}}* ./ui/beam-res/cli/
        cp ./downloads/beam-node${{env.BEAM_TARGET_SUFFIX}}* ./ui/beam-res/node/
        cp ./downloads/wasm-client.* ./ui/front/dist/

        npm install --global yarn

    - name: Prepare for electron build [macos-11 && ubuntu all]
      shell: bash
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04' || matrix.os == 'macos-11'
      run: |
        mkdir -p ./ui/beam-res/{api,cli,node} ./ui/front/dist/assets
        tar xvf ./downloads/wallet-api${{env.BEAM_TARGET_SUFFIX}}.tar -C ./ui/beam-res/api
        tar xvf ./downloads/beam-wallet${{env.BEAM_TARGET_SUFFIX}}.tar -C ./ui/beam-res/cli
        tar xvf ./downloads/beam-node${{env.BEAM_TARGET_SUFFIX}}.tar -C ./ui/beam-res/node
        cp ./downloads/wasm-client* ./ui/front/dist
        sudo npm install --global yarn

    - name: Cache node modules
      uses: actions/cache@v3
      id: cache-electron-modules
      env:
        cache-name: electron-node-modules
      with:
        path: |
          ui/front/node_modules
          ui/node_modules
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}-
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install front dependencies
      if: steps.cache-electron-modules.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd ui/front
        yarn --frozen-lockfile

    - name: Build front
      shell: bash
      run: |
        cd ui/front
        NODE_ENV=production yarn build

    - name: Copy app
      shell: bash
      run: |
        cp ./shaders/app.wasm ./ui/front/dist/assets

    - name: Install electron dependencies
      shell: bash
      if: steps.cache-electron-modules.outputs.cache-hit != 'true'
      run: |
        cd ui
        yarn --frozen-lockfile

    - name: Install dmg licence [macos-11]
      shell: bash
      if: matrix.os == 'macos-11' && steps.cache-electron-modules.outputs.cache-hit != 'true'
      run: |
        cd ui
        npm i dmg-license

    - name: Install wasm [windows-2019]
      if: matrix.os == 'windows-2019' && steps.cache-electron-modules.outputs.cache-hit != 'true'
      uses: ilammy/setup-nasm@v1

    - name: Set up perl [windows-2019]
      if: matrix.os == 'windows-2019' && steps.cache-electron-modules.outputs.cache-hit != 'true'
      uses: shogo82148/actions-setup-perl@v1
      with:
        perl-version: '5.34'

    - name: Disable tests in rebuilding modules [windows-2019]
      if: matrix.os == 'windows-2019' && steps.cache-electron-modules.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd ui
        if [ -d "./node_modules/nodegit" ]; then
          sed -i 's/nmake test/REM nmake test/g' node_modules/nodegit/utils/build-openssl.bat
          sed -i 's/no-ssl2/no-ssl2 no-tests/g' node_modules/nodegit/utils/build-openssl.bat
        fi

    - name: Rebuild modules [windows-2019]
      if: matrix.os == 'windows-2019' && steps.cache-electron-modules.outputs.cache-hit != 'true'
      run: |
        cd ui
        .\node_modules\.bin\electron-rebuild.cmd
      env:
        npm_config_vcvarsall_path: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat'

    - name: Rebuild modules [ubuntu-all && macos-all]
      if: matrix.os != 'windows-2019' && steps.cache-electron-modules.outputs.cache-hit != 'true'
      run: |
        cd ui

        if [ -d "./node_modules/nodegit" ]; then
          cd node_modules/nodegit/utils
          perl -0777 -i -pe 's/await execPromise\("make test"(.*?){ pipeOutput: true }\);//igs' acquireOpenSSL.js
          echo "$(cat acquireOpenSSL.js | grep 'make test')"
          cd ../../..
        fi

        ./node_modules/.bin/electron-rebuild


###############################################################################
# Build
###############################################################################
    - name: Build [macos-11]
      if: matrix.os == 'macos-11'
      run: cmake --build . --parallel --config $BUILD_TYPE

    - name: Build [ubuntu all]
      shell: bash
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: make -j$(nproc)

    - name: Build [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: cmake --build . --config $BUILD_CONFIG --parallel

###############################################################################
# Test
###############################################################################
    - name: Test [macos-11]
      if: matrix.os == 'macos-11'
      continue-on-error: false
      run: ctest -C $BUILD_TYPE --verbose

    - name: Test [ubuntu all]
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      continue-on-error: false
      shell: bash
      run: ctest --verbose

    - name: Test [windows]
      if: matrix.os == 'windows-2019'
      continue-on-error: false
      shell: bash
      run: ctest -C $BUILD_CONFIG --verbose

###############################################################################
# Build desktop
###############################################################################
    - name: Copy SOURC3 helper [ubuntu-all && macos-all]
      shell: bash
      if: matrix.os != 'windows-2019'
      run: |
        cp remote_helper/git-remote-sourc3 ui/git-remote-sourc3
        cp remote_helper/sourc3-remote.cfg ui/sourc3-remote.cfg

    - name: Copy SOURC3 helper [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        cp remote_helper/${{env.BUILD_CONFIG}}/git-remote-sourc3.exe ui/build/git-remote-sourc3.exe
        cp remote_helper/sourc3-remote.cfg ui/sourc3-remote.cfg

    - name: Build electron
      shell: bash
      run: |
        cd ui
        yarn build && yarn bundle
        yarn app:dist

    - name: Repack with libs [ubuntu-all]
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: |
        cd ui/dist
        wget "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
        chmod a+x appimagetool-x86_64.AppImage
        filename=$(ls | grep client | grep AppImage)
        ./$filename --appimage-extract
        cd squashfs-root/usr/lib
        for sym_file in libssl.so libkrb5.so libk5crypto.so libcom_err.so libcrypto.so libkrb5support.so
        do
          lib_file=$(readlink -f /usr/lib/x86_64-linux-gnu/$sym_file)
          cp $lib_file .
          local_name=$(echo $lib_file | cut -d '/' -f 5)
          ln -s $local_name $sym_file
        done
        cd ../../..
        mv -v squashfs-root/resources/git-remote-sourc3 squashfs-root/git-remote-sourc3
        rm $filename
        ./appimagetool-x86_64.AppImage squashfs-root $filename
        rm appimagetool-x86_64.AppImage

###############################################################################
# Collect artifacts
###############################################################################
    - name: Import Code-Signing Certificates [macos-11]
      if: matrix.os == 'macos-11'
      uses: Apple-Actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
        p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
    - name: Sign the mac binaries [macos-11]
      if: matrix.os == 'macos-11'
      run: |
        codesign --deep --force -v -s "${{secrets.MACOS_SIGN_IDENTITY}}" -o runtime --timestamp remote_helper/git-remote-sourc3

    - name: Checksum [ubuntu]
      if: matrix.os == 'ubuntu-16.04' || matrix.os =='ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: |
        sha256sum remote_helper/git-remote-sourc3 > remote_helper/git-remote-sourc3${{env.BEAM_TARGET_SUFFIX}}-checksum.txt

    - name: Checksum [macos-11]
      if: matrix.os == 'macos-11'
      run: |
        shasum -a 256 remote_helper/git-remote-sourc3 > remote_helper/git-remote-sourc3${{env.BEAM_TARGET_SUFFIX}}-checksum.txt

    - name: Collect [macos-11 && ubuntu all]
      shell: bash
      if: matrix.os != 'windows-2019'
      run: |
        mkdir artifacts
        tar -cvf artifacts/sourc3.tar -C remote_helper git-remote-sourc3 git-remote-sourc3${{env.BEAM_TARGET_SUFFIX}}-checksum.txt sourc3-remote.cfg

    - name: Collect [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        mkdir artifacts
        cp remote_helper/${{env.BUILD_CONFIG}}/git-remote-sourc3.exe artifacts/git-remote-sourc3.exe
        cp remote_helper/sourc3-remote.cfg artifacts/sourc3-remote.cfg

    - name: Collect pdb [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        mkdir pdb
        cp remote_helper/${{env.BUILD_CONFIG}}/git-remote-sourc3.pdb pdb/git-remote-sourc3{{env.BEAM_TARGET_SUFFIX}}.pdb

    - name: Checksum [windows]
      if: matrix.os == 'windows-2019'
      run: |
        certUtil -hashfile artifacts/git-remote-sourc3.exe SHA256 > artifacts/git-remote-sourc3${{env.BEAM_TARGET_SUFFIX}}-checksum.txt

    - name: Notarize [macos-11]
      shell: bash
      if: matrix.os == 'macos-11'
      env:
        MACOS_NOTARIZE_USER: ${{ secrets.MACOS_NOTARIZE_USER }}
        MACOS_NOTARIZE_PASS: ${{ secrets.MACOS_NOTARIZE_PASS }}
        MACOS_NOTARIZE_PROVIDER: ${{ secrets.MACOS_NOTARIZE_PROVIDER }}
      run: |
        chmod +x ./notarize.sh
        set -- ui/dist/*.dmg
        DMG_NAME=$1
        BUNDLE_ID=com.io.sourc3.client
        ./notarize.sh $DMG_NAME $BUNDLE_ID
        shasum -a 256 $DMG_NAME > checksum.txt

    - name: Prepare artifacts [ubuntu all]
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      shell: bash
      run: |
        mkdir -p installer/${{matrix.PLATFORM_NAME}}
        cp ui/dist/*.AppImage installer/${{matrix.PLATFORM_NAME}}

    - name: Prepare artifacts [macos]
      if: matrix.os == 'macos-11'
      shell: bash
      run: |
        mkdir -p installer/${{matrix.PLATFORM_NAME}}
        cp ui/dist/*.dmg installer/${{matrix.PLATFORM_NAME}}

    - name: Prepare artifacts [windows]
      if: matrix.os == 'windows-2019'
      shell: bash
      run: |
        mkdir -p installer/${{matrix.PLATFORM_NAME}}
        cp ui/dist/*.exe installer/${{matrix.PLATFORM_NAME}}

        #TODO
        #- name: Prepare artifacts [macos]
        #if: matrix.os == 'macos-11'
        #shell: bash
        #run: |
        #mkdir -p installer
        #ls ${{env.ELECTRON_ROOT}}/out/make/
        #cp ${{env.ELECTRON_ROOT}}/out/make/*.dmg installer

###############################################################################
# Upload
###############################################################################
    - uses: actions/upload-artifact@v2
      with:
        name: ${{matrix.PLATFORM_NAME}}-sourc3${{env.BEAM_TARGET_SUFFIX}}-${{env.PACKAGE_VERSION}}
        path: artifacts/*
        if-no-files-found: error

          # TODO
          #- uses: actions/upload-artifact@v2
          #if: matrix.os == 'macos-11'
          #with:
          #name: sourc3-client${{env.BEAM_TARGET_SUFFIX}}-${{env.PACKAGE_VERSION}}-${{matrix.PLATFORM_NAME}}
          #path: installer/*
          #if-no-files-found: error

    - uses: actions/upload-artifact@v2
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      with:
        name: ${{matrix.PLATFORM_NAME}}-sourc3-client${{env.BEAM_TARGET_SUFFIX}}-${{env.PACKAGE_VERSION}}
        path: installer/${{matrix.PLATFORM_NAME}}/*.AppImage
        if-no-files-found: error

    - uses: actions/upload-artifact@v2
      if: matrix.os == 'macos-11'
      with:
        name: ${{matrix.PLATFORM_NAME}}-sourc3-client${{env.BEAM_TARGET_SUFFIX}}-${{env.PACKAGE_VERSION}}
        path: installer/${{matrix.PLATFORM_NAME}}/*.dmg
        if-no-files-found: error
        
    - uses: actions/upload-artifact@v2
      if: matrix.os == 'windows-2019'
      with:
        name: ${{matrix.PLATFORM_NAME}}-sourc3-client${{env.BEAM_TARGET_SUFFIX}}-${{env.PACKAGE_VERSION}}
        path: installer/${{matrix.PLATFORM_NAME}}/*.exe
        if-no-files-found: error

###############################################################################
# Upload windows pdb
###############################################################################
    - uses: actions/upload-artifact@v2
      if: matrix.os == 'windows-2019'
      with:
        name: sourc3${{env.BEAM_TARGET_SUFFIX}}-${{env.PACKAGE_VERSION}}-pdb
        path: pdb
        if-no-files-found: error
